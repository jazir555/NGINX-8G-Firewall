user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /run/nginx.pid;

events {
    worker_connections 10240;  # increase if you expect large concurrency
    use epoll;                 # Linux-only: epoll is recommended
    multi_accept on;
}

# ---------------------------
# Global HTTP config
# ---------------------------
http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    server_tokens off;
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Optional: if you sit behind a proxy/load balancer, uncomment and set appropriately:
    # set_real_ip_from  10.0.0.0/8;
    # set_real_ip_from  192.168.0.0/16;
    # real_ip_header    X-Forwarded-For;
    # real_ip_recursive on;

    # ---------------------------
    # Logging formats
    # ---------------------------
    log_format  main  '$remote_addr - $remote_user [$time_local] '
                      '"$request" $status $body_bytes_sent '
                      '"$http_referer" "$http_user_agent" '
                      '$request_time $upstream_response_time';

    log_format blocked '$remote_addr - $remote_user [$time_local] '
                       '"$request" status=$status blocked=$block_all ua="$http_user_agent" '
                       'ref="$http_referer" q="$query_string" rt=$request_time';

    access_log /var/log/nginx/access.log main;
    access_log /var/log/nginx/blocked.log blocked if=$block_all;

    # ---------------------------
    # Basic resource limits & timeouts (tune for your environment)
    # ---------------------------
    client_body_timeout 10s;
    client_header_timeout 10s;
    keepalive_timeout 5s;
    send_timeout 10s;
    client_max_body_size 10m;
    client_body_buffer_size 16k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 8k;
    lingering_timeout 5s;

    # ---------------------------
    # TLS / SSL defaults (server-level overrides still allowed)
    # ---------------------------
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # ---------------------------
    # Rate limiting & connection zones
    # ---------------------------
    limit_req_zone $binary_remote_addr zone=global_req:10m rate=10r/s;      # global baseline
    limit_req_zone $binary_remote_addr zone=login_req:10m  rate=2r/s;      # for login endpoints
    limit_conn_zone $binary_remote_addr zone=addr_conn:10m;                # connection limit

    # ---------------------------
    # MAPS: detectors and policies
    # ---------------------------

    # Geo blocklist (quick bans by CIDR) - extend as needed
    geo $blocked_ip {
        default 0;
        # example bad ranges - replace with real lists
        192.0.2.0/24 1;
        198.51.100.0/24 1;
        # Add country CIDR or individual IPs here if needed
    }

    # Common bad user agents / scanners / headless browsers
    map $http_user_agent $bad_bot {
        default 0;
        "~*(?i)(acunetix|nikto|sqlmap|netsparker|dirbuster|masscan|burpsuite|wpscan|fimap|havij|curl|wget|python-requests|libwww-perl|phantomjs|headlesschrome|puppeteer|selenium|go-http-client)" 1;
        "~*^$" 1;   # empty UA -> suspicious
    }

    # Additional UA categorization for logging and flexible rules
    map $http_user_agent $ua_category {
        default "human";
        "~*(?i)bot|spider|crawl|slurp|bingpreview" "bot";
        "~*(?i)curl|wget|python|perl|java|go-http-client" "cli";
    }

    # Block suspicious referers
    map $http_referer $block_referer {
        default 0;
        "~*(?:poker|viagra|cialis|dating|porn|pharma|casino|adult|semalt|buttons-for-website)" 1;
        "~*\.(?:ru|cn|xyz|top|buzz|icu)$" 1;
    }

    # Block suspicious query strings (XSS / SQLi / RCE patterns). Keep regex conservative.
    map $query_string $block_query {
        default 0;
        "~*(?:<script|javascript:|data:text/html|onerror=|onload=|alert\(|eval\(|document\.cookie|window\.location)" 1;
        "~*(?:\bunion\s+select\b|\binformation_schema\b|\bsleep\(\d+\)|\bbenchmark\(|\bload_file\(|\binto\s+outfile\b|\bconcat\(|base64_decode\()" 1;
        "~*[A-Za-z0-9]{1000,}" 1;  # extremely long query -> DoS/scan
        "~*(?:etc/passwd|etc/shadow|proc/self/environ|/etc/hosts|\\.ssh|\\.bash_history)" 1;
        "~*(?:;wget\s|;curl\s|;nc\s|;rm\s|;bash\s|;sh\s)" 1;
    }

    # Block suspicious URIs and file extension scans
    map $request_uri $block_uri {
        default 0;
        "~*(?:phpinfo|shell\.php|c99\.php|r57\.php|wso\.php|phpmyadmin|pma|sqlmap|adminer|log4shell|/\\.env|/\\.htaccess)" 1;
        "~*\\.(?:cgi|asp|aspx|dll|exe|jsp|mdb|ini|sh|bat|pl|ps1|vbs|pfx|pem|crt|key)$" 1;
        "~*(?:/etc/|/proc/|/root/|/tmp/|/var/|/\\.git|/\\.svn|\\.sql$|\\.bak$|backup/)" 1;
    }

    # Block suspicious HTTP methods
    map $request_method $block_method {
        default 0;
        "~*(?:TRACE|TRACK|CONNECT|MOVE|PROPFIND|PROPPATCH|COPY|LOCK|UNLOCK|MKCOL|PATCH)" 1;
    }

    # Combine detectors to a single flag for convenience
    # if any detector equals "1" the combined $block_all will be 1
    map "$blocked_ip$bad_bot$block_referer$block_query$block_uri$block_method" $block_all {
        default 0;
        "~*1" 1;
    }

    # Determine which requests are "large" based on Content-Type
    map $content_type $max_request_size {
        default                                    10m;
        "application/json"                         1m;
        "application/xml"                          2m;
        "application/x-www-form-urlencoded"        1m;
        "multipart/form-data"                     50m;   # file upload endpoints should handle separately
    }

    # ---------------------------
    # Security headers (can be tuned)
    # ---------------------------
    # Note: CSP below is intentionally conservative â€” adapt per your JS/CSS hostings
    # Use report-uri / report-to if you want CSP violation reporting.
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-XSS-Protection "0" always;  # modern browsers ignore, set to 0 to avoid conflicts
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data: https:;" always;

    # ---------------------------
    # Gzip
    # ---------------------------
    gzip on;
    gzip_vary on;
    gzip_comp_level 5;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # ---------------------------
    # Default server for port 80 (redirect to https)
    # ---------------------------
    server {
        listen 80 default_server reuseport;
        listen [::]:80 default_server reuseport;
        server_name _;

        # quick redirect to https preserving host and URI
        return 301 https://$host$request_uri;
    }

    # ---------------------------
    # Hardened HTTPS server
    # ---------------------------
    server {
        listen 443 ssl http2 reuseport;
        listen [::]:443 ssl http2 reuseport;
        server_name yourdomain.com www.yourdomain.com;  # <-- replace with your domain(s)

        # TLS certificate paths - replace with actual cert/key
        ssl_certificate /etc/ssl/certs/your_cert.pem;
        ssl_certificate_key /etc/ssl/private/your_key.pem;
        ssl_trusted_certificate /etc/ssl/certs/chain.pem;

        # Optional: enable TLS 1.3-only profile if you can
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE+AESGCM:DHE+AESGCM';
        ssl_prefer_server_ciphers on;

        # Basic limits & protections per-server
        limit_conn addr_conn 20;            # per-IP connection limit (tunable)
        limit_req zone=global_req burst=50 nodelay;

        # Root / document root
        root /var/www/html;
        index index.html index.htm index.php;

        # Deny direct access to hidden files / dotfiles
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Deny access to sensitive filenames
        location ~* (?:README|LICENSE|COPYING|AUTHORS|INSTALL|TODO|VERSION|CHANGES|NEWS)$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Block common backup and sensitive extensions
        location ~* \.(?:log|backup|sql|db|tar|gz|zip|7z|bin|pfx|pgp|dmp|bak)$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Global request inspections: reject early if flagged
        # Small, fast checks before expensive processing:
        if ($block_all) {
            # 444 closes connection (no response)
            return 444;
        }

        # Deny known bad bots explicitly
        if ($bad_bot = 1) {
            return 444;
        }

        # Deny by referer
        if ($block_referer = 1) {
            return 403;
        }

        # Main site root behavior
        location / {
            # Basic caching controls
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" always;
            expires off;

            # Tighten body size based on content type mapping above
            set $limit_body $max_request_size;
            client_max_body_size $limit_body;

            # Normal try_files fallback
            try_files $uri $uri/ /index.php?$query_string;
        }

        # Protect application admin paths (example)
        location ~* ^/(?:admin|adminer|phpmyadmin|myadmin)/ {
            # Example: require HTTP Basic auth and/or IP allowlist
            # To enable basic auth: create /etc/nginx/.htpasswd and uncomment:
            # auth_basic "Admin Area";
            # auth_basic_user_file /etc/nginx/.htpasswd;

            # Example IP allowlist (replace with your admin IPs)
            # allow 203.0.113.45;
            # deny all;

            add_header X-Frame-Options "DENY" always;
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0" always;

            try_files $uri $uri/ =404;
        }

        # Login & XML-RPC with strict rate limiting
        location = /wp-login.php {
            limit_req zone=login_req burst=3 nodelay;
            include fastcgi_params;
            fastcgi_pass unix:/run/php-fpm/www.sock;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        }

        location = /xmlrpc.php {
            limit_req zone=login_req burst=3 nodelay;
            include fastcgi_params;
            fastcgi_pass unix:/run/php-fpm/www.sock;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        }

        # API location example - CORS + strict methods
        location /api/ {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' 'https://yourdomain.com';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
            add_header 'Access-Control-Allow-Origin' 'https://yourdomain.com';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        }

        # PHP-FPM handling
        location ~ \.php$ {
            # Security: only allow files that exist
            try_files $uri =404;

            include fastcgi_params;
            fastcgi_split_path_info ^(.+\.php)(/.+)$;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            fastcgi_intercept_errors on;
            fastcgi_buffers 16 16k;
            fastcgi_buffer_size 32k;
            fastcgi_read_timeout 60s;
            fastcgi_send_timeout 60s;
            fastcgi_pass unix:/run/php-fpm/www.sock;  # adjust if using tcp (127.0.0.1:9000)
        }

        # Static files: long caching for assets
        location ~* \.(?:css|js|jpg|jpeg|gif|png|ico|svg|woff2|woff|ttf|eot)$ {
            expires 30d;
            access_log off;
            add_header Cache-Control "public, must-revalidate";
        }

        # Deny other methods globally - safer alternative to "if"
        location / {
            limit_except GET HEAD POST OPTIONS {
                deny all;
            }
        }

        # Custom error pages (optional)
        error_page 403 /403.html;
        error_page 404 /404.html;
        error_page 405 /405.html;
        location = /403.html { internal; }
        location = /404.html { internal; }
        location = /405.html { internal; }
    }

    # ---------------------------
    # Optional: a separate server for health checks or internal endpoints
    # ---------------------------
    server {
        listen 127.0.0.1:8080;
        server_name localhost;
        location /healthz {
            access_log off;
            return 200 'ok';
        }
    }

    # ---------------------------
    # Include additional conf files if present
    # ---------------------------
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
}